/*
 * Copyright (c) 2016-2021, FusionAuth, All Rights Reserved
 */

fusionauthWebsiteStyleVersion = "0.3.43-{integration}"

project(group: "io.fusionauth", name: "fusionauth-site", version: "3.0.0", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "css", export: false) {
      dependency(id: "io.fusionauth:fusionauth-style:fusionauth-website-style:${fusionauthWebsiteStyleVersion}:css")
      dependency(id: "io.fusionauth:fusionauth-style:fusionauth-website-style:${fusionauthWebsiteStyleVersion}:css.map")
    }
  }
}

release = loadPlugin(id: "org.savantbuild.plugin:release-git:1.0.0")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")

target(name: "css", description: "Copies the CSS into place") {
  file.delete {
    fileSet(dir: "site/assets/css", includePatterns: [~/fusionauth-website.+/,~/fusionauth-login-style.+/])
  }

  dependency.copy(to: "site/assets/css") {
    dependencies(group: "css", transitive: false, fetchSource: true)
  }

  file.copyFile(file: "site/assets/css/fusionauth-website-style-${fusionauthWebsiteStyleVersion}.css", to: "site/assets/css/fusionauth-login-style.css")

  file.rename {
    fileSet(dir: "site/assets/css", includePatterns: [~/fusionauth-website.+/])
    filter(token: "-{integration}", value: "")
  }
}

target(name: "clean", description: "cleans the project", dependsOn: ["css"]) {
  cleanExecute(["bundle", "exec", "jekyll", "clean"], false)
}

target(name: "compile", description: "builds the project", dependsOn: ["css"]) {
  if (switches.has("drafts")) {
    cleanExecute(["bundle", "exec", "jekyll", "build", "--drafts"], false)
  } else {
    cleanExecute(["bundle", "exec", "jekyll", "build"], false)
  }
}

target(name: "serve", description: "Build and watch the project", dependsOn: ["css"]) {
  cleanExecute(["bundle", "exec", "jekyll", "serve", "--drafts", "--future", "--incremental", "-o"], false)
}

target(name: "watch", description: "Build and watch the project", dependsOn: ["css"]) {
  cleanExecute(["bundle", "exec", "jekyll", "build", "--drafts", "--future", "--incremental", "--watch"], false)
}

target(name: "release", description: "Releases a full version of the project", dependsOn:["clean", "compile"]) {
  release.release()
}

target(name: "push", description: "Push the site to fusionauth.io", dependsOn: ["clean"]) {
  // Skip checking Git if we are forced to do so (use the force Luke)
  if (!switches.has("force")) {
    output.infoln("Checking git")
    cleanExecute(["git", "status"], false) // Clear any local oddities
    if (!cleanExecute(["git", "diff-index", "--quiet", "origin/master", "--"], false)) {
      output.infoln("You must commit and push your changes before running this command. (Use --force to skip this check, but keep in mind that your local changes won't be visible until they are pushed)")
      exit 1
    }
  }

  // Build for production deployment
  if (!cleanExecute(["bundle", "exec", "jekyll", "build","--trace"], true)) {
    output.infoln("jekyll didn't build correctly. Review output to see what went wrong.")
    exit 1
  }

  // Refresh the algolia index.
  if (!switches.has("skipReindex")) {
    cleanExecute(["bundle", "exec", "jekyll", "algolia"], false)
  }

  cleanExecute(["bundle", "exec", "s3_website", "push"], false)
}

boolean cleanExecute(List<String> args, boolean prod) {
  ProcessBuilder pb = new ProcessBuilder(args).inheritIO().directory(new File('.'))
  clearEnvironment(pb)

  if (prod) {
    pb.environment().put("JEKYLL_ENV", "production")
  }

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

/**
 * Clears out the RBENV variables in the environment.
 *
 * @param pb The ProcessBuilder to clear out.
 */
static def clearEnvironment(ProcessBuilder pb) {
  pb.environment().remove("RBENV_VERSION")
  pb.environment().remove("RBENV_DIR")
  pb.environment().remove("RBENV_ROOT")
}
